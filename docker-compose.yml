version: "3.7"

services:
  frontend:
    build: 
      context: ./frontend 
    ports:
     - 3030:3000
    container_name: frontend-con
    volumes: 
      - build_frontend:/frontend/build
      - ./frontend:/frontend/
      # - ./frontend/node_modules/:/frontend/node_modules
    restart: always
    image: run
    environment:
      - WATCHPACK_POLLING="true"
    # stdin_open: true
    tty: true

  backend:
    build:
      context: ./backend
    ports:
     - 5000:5000
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
      FLASK_APP: ./app.py
      APP_NAME: "backend"
      STATSD_HOST: "statsd-exporter"
      STATSD_PORT: "9125"
    container_name: backend-con
    # expose:
    #   - 5000
    restart: always
    # command: flask run --host=0.0.0.0 --port=5000
    # command: gunicorn --bind 0.0.0.0:5000 app:app
    links:
      - rabbitmq
      - db
    volumes:
      - ./backend:/backend/
    depends_on:
      - db
      - rabbitmq
    tty: true

  ai:
    build:
      context: ./ai
    ports:
    - 5001:5000
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
      FLASK_APP: ./app.py
    container_name: ai-con
    expose:
      - 5001
    restart: always
    # command: flask run --host=0.0.0.0 --port=5001
    volumes:
      - ./ai:/ai/
    depends_on:
      - rabbitmq
      - db
      - backend
    links:
      - rabbitmq
      - db
    tty: true

  db:
    image: mysql
    platform: linux/amd64
    container_name: mysql-con
    ports:
      - 3307:3306
    volumes:
      - data_mysql:/mysql
    env_file:
      - .env
    # environment:
    #   MYSQL_DATABASE: "${MYSQL_DATABASE}"
    #   MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    tty: true

  nginx:
    image: nginx:1.21.5-alpine
    build: ./nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - build_frontend:/frontend/
    container_name: nginx-con
    depends_on:
      - frontend
      - backend
    tty: true

  rabbitmq:
    image : rabbitmq:3-management
    container_name: rabbitmq-con
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - 5672:5672 
      - 15672:15672
    # command: rabbitmq-plugins enable rabbitmq_management
    volumes:
      - data_rabbitmq:/rabbitmq
    tty: true

  worker:
    build:
      context: './ai'
      dockerfile: Dockerfile.celery
    container_name: worker-con
    user: root
    # https://stackoverflow.com/questions/50054671/no-module-named-app-when-running-celery-worker-a-app-in-eb-ebextensions
    command: celery -A ai.tasks.celery_app worker --loglevel=info
    # volumes:
      # - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    restart: always
    depends_on:
      - rabbitmq
      - ai
      - db
    tty: true
    
  flower:
    image: mher/flower
    container_name: flower-con
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - FLOWER_PORT=5555
    ports:
      - 5555:5555
    tty: true

  statsd-exporter:
    container_name: exporter-con
    image: prom/statsd-exporter:v0.22.4
    ports:
      - "9125:9125"
      - "9102:9102"
    volumes:
      - ./etc/statsd-exporter/statsd.conf:/statsd/statsd.conf
    command:
      - --statsd.mapping-config=/statsd/statsd.conf

  prometheus:
    container_name: prometheus-con
    image: prom/prometheus:v2.33.5
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - '--config.file=/workspace/prometheus.yml'

  grafana:
    container_name: grafana-con
    image: grafana/grafana:8.4.3
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/:/etc/grafana/provisioning/datasources
      - ./etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"

volumes:
  build_frontend: null
  data_mysql: null
  data_rabbitmq: null

#docker-compose up --build
#volume
#docker volume prune
# sudo curl -L “https://github.com/docker/compose/releases/download/2.2.3/docker-compose-$(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose
# docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password --name mysql-con -v /var/lib/docker/volumes/mysql/_data mysql:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci